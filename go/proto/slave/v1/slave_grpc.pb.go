// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/slave/v1/slave.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SlaveService_Register_FullMethodName = "/slave.v1.SlaveService/Register"
)

// SlaveServiceClient is the client API for SlaveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlaveServiceClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type slaveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlaveServiceClient(cc grpc.ClientConnInterface) SlaveServiceClient {
	return &slaveServiceClient{cc}
}

func (c *slaveServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, SlaveService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlaveServiceServer is the server API for SlaveService service.
// All implementations must embed UnimplementedSlaveServiceServer
// for forward compatibility
type SlaveServiceServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedSlaveServiceServer()
}

// UnimplementedSlaveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSlaveServiceServer struct {
}

func (UnimplementedSlaveServiceServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedSlaveServiceServer) mustEmbedUnimplementedSlaveServiceServer() {}

// UnsafeSlaveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlaveServiceServer will
// result in compilation errors.
type UnsafeSlaveServiceServer interface {
	mustEmbedUnimplementedSlaveServiceServer()
}

func RegisterSlaveServiceServer(s grpc.ServiceRegistrar, srv SlaveServiceServer) {
	s.RegisterService(&SlaveService_ServiceDesc, srv)
}

func _SlaveService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlaveServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlaveService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlaveServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlaveService_ServiceDesc is the grpc.ServiceDesc for SlaveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlaveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slave.v1.SlaveService",
	HandlerType: (*SlaveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _SlaveService_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/slave/v1/slave.proto",
}
