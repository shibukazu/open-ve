// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: proto/validate/v1/validate.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ValidateService_Check_FullMethodName = "/validate.v1.ValidateService/Check"
)

// ValidateServiceClient is the client API for ValidateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidateServiceClient interface {
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error)
}

type validateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidateServiceClient(cc grpc.ClientConnInterface) ValidateServiceClient {
	return &validateServiceClient{cc}
}

func (c *validateServiceClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResponse)
	err := c.cc.Invoke(ctx, ValidateService_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidateServiceServer is the server API for ValidateService service.
// All implementations must embed UnimplementedValidateServiceServer
// for forward compatibility
type ValidateServiceServer interface {
	Check(context.Context, *CheckRequest) (*CheckResponse, error)
	mustEmbedUnimplementedValidateServiceServer()
}

// UnimplementedValidateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedValidateServiceServer struct {
}

func (UnimplementedValidateServiceServer) Check(context.Context, *CheckRequest) (*CheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedValidateServiceServer) mustEmbedUnimplementedValidateServiceServer() {}

// UnsafeValidateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidateServiceServer will
// result in compilation errors.
type UnsafeValidateServiceServer interface {
	mustEmbedUnimplementedValidateServiceServer()
}

func RegisterValidateServiceServer(s grpc.ServiceRegistrar, srv ValidateServiceServer) {
	s.RegisterService(&ValidateService_ServiceDesc, srv)
}

func _ValidateService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidateServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ValidateService_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidateServiceServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidateService_ServiceDesc is the grpc.ServiceDesc for ValidateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "validate.v1.ValidateService",
	HandlerType: (*ValidateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _ValidateService_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/validate/v1/validate.proto",
}
